{"ast":null,"code":"var _jsxFileName = \"/Users/vidhya-v/Desktop/Book_Management/frontend/src/components/EditGenrePage.js\",\n  _s = $RefreshSig$();\n// EditGenrePage.js\n\nimport React, { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction EditGenrePage() {\n  _s();\n  const {\n    id\n  } = useParams(); // Use useParams hook to get parameters from URL\n  const [genreName, setGenreName] = useState('');\n  const [error, setError] = useState(null);\n  const [isLoading, setIsLoading] = useState(true);\n  useEffect(() => {\n    // Fetch genre data from API based on genre_id\n    fetch(`/genres/${id}`).then(response => {\n      if (!response.ok) {\n        throw new Error('Genre not found');\n      }\n      return response.json();\n    }).then(data => {\n      setGenreName(data.genre_name);\n      setIsLoading(false);\n    }).catch(error => {\n      setError(error.message);\n      setIsLoading(false);\n    });\n  }, [id]); // Include id in dependency array to fetch data when id changes\n\n  const handleGenreNameChange = event => {\n    setGenreName(event.target.value);\n  };\n  const handleSubmit = event => {\n    event.preventDefault();\n    // Perform update request to API\n    fetch(`/genres/${id}`, {\n      method: 'PUT',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        genre_name: genreName\n      }) // Update genre_name\n    }).then(response => {\n      if (!response.ok) {\n        throw new Error('Failed to update genre');\n      }\n      alert('Genre updated successfully');\n      // Redirect to genres page or perform any other action upon successful update\n    }).catch(error => {\n      console.error('Error updating genre:', error);\n      alert('Failed to update genre');\n    });\n  };\n  if (isLoading) {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 12\n    }, this);\n  }\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Error: \", error]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Edit Genre\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form-group\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"genreName\",\n          children: \"Genre Name:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          className: \"form-control\",\n          id: \"genreName\",\n          value: genreName,\n          onChange: handleGenreNameChange,\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        className: \"btn btn-primary\",\n        children: \"Update Genre\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 67,\n    columnNumber: 5\n  }, this);\n}\n_s(EditGenrePage, \"PAR6ViCWok9XicBrFIZAk02AqnQ=\", false, function () {\n  return [useParams];\n});\n_c = EditGenrePage;\nexport default EditGenrePage;\nvar _c;\n$RefreshReg$(_c, \"EditGenrePage\");","map":{"version":3,"names":["React","useState","useEffect","useParams","jsxDEV","_jsxDEV","EditGenrePage","_s","id","genreName","setGenreName","error","setError","isLoading","setIsLoading","fetch","then","response","ok","Error","json","data","genre_name","catch","message","handleGenreNameChange","event","target","value","handleSubmit","preventDefault","method","headers","body","JSON","stringify","alert","console","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","className","htmlFor","type","onChange","required","_c","$RefreshReg$"],"sources":["/Users/vidhya-v/Desktop/Book_Management/frontend/src/components/EditGenrePage.js"],"sourcesContent":["// EditGenrePage.js\n\nimport React, { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\n\nfunction EditGenrePage() {\n  const { id } = useParams(); // Use useParams hook to get parameters from URL\n  const [genreName, setGenreName] = useState('');\n  const [error, setError] = useState(null);\n  const [isLoading, setIsLoading] = useState(true);\n\n  useEffect(() => {\n    // Fetch genre data from API based on genre_id\n    fetch(`/genres/${id}`)\n      .then((response) => {\n        if (!response.ok) {\n          throw new Error('Genre not found');\n        }\n        return response.json();\n      })\n      .then((data) => {\n        setGenreName(data.genre_name);\n        setIsLoading(false);\n      })\n      .catch((error) => {\n        setError(error.message);\n        setIsLoading(false);\n      });\n  }, [id]); // Include id in dependency array to fetch data when id changes\n\n  const handleGenreNameChange = (event) => {\n    setGenreName(event.target.value);\n  };\n\n  const handleSubmit = (event) => {\n    event.preventDefault();\n    // Perform update request to API\n    fetch(`/genres/${id}`, {\n      method: 'PUT',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({ genre_name: genreName }), // Update genre_name\n    })\n      .then((response) => {\n        if (!response.ok) {\n          throw new Error('Failed to update genre');\n        }\n        alert('Genre updated successfully');\n        // Redirect to genres page or perform any other action upon successful update\n      })\n      .catch((error) => {\n        console.error('Error updating genre:', error);\n        alert('Failed to update genre');\n      });\n  };\n\n  if (isLoading) {\n    return <p>Loading...</p>;\n  }\n\n  if (error) {\n    return <p>Error: {error}</p>;\n  }\n\n  return (\n    <div>\n      <h2>Edit Genre</h2>\n      <form onSubmit={handleSubmit}>\n        <div className=\"form-group\">\n          <label htmlFor=\"genreName\">Genre Name:</label>\n          <input\n            type=\"text\"\n            className=\"form-control\"\n            id=\"genreName\"\n            value={genreName}\n            onChange={handleGenreNameChange}\n            required\n          />\n        </div>\n        <button type=\"submit\" className=\"btn btn-primary\">\n          Update Genre\n        </button>\n      </form>\n    </div>\n  );\n}\n\nexport default EditGenrePage;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}